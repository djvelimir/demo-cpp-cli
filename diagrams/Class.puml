@startuml class
abstract class ProgramBase {
    + {abstract} Start(args: string[], length: int)
}

class Program {
    - argumentProcessor: ArgumentProcessorBase
}

abstract class ArgumentValidatorBase {
    + {abstract} Validate(args: string[], length: int): boolean
}

class ArgumentValidator {
}

abstract class ArgumentProcessorBase {
    + {abstract} Process(args: string[], length: int)
}

class ArgumentProcessor {
    - argumentValidator: ArgumentValidatorBase
    - passwordGenerator: PasswordGeneratorBase
    - terminal: TerminalBase
}

abstract class TerminalBase {
    + {abstract} Show(message: string)
}

class Terminal {
}

abstract class PasswordGeneratorBase {
    + {abstract} Generate(): string
}

class PasswordGenerator {
    - passwordLength: int
    - randomCharacterGenerator: RandomCharacterGeneratorBase
    - stringShuffler: StringShufflerBase
}

interface RandomCharacterGeneratorBase {
    + GenerateUppercaseCharacter(): char
    + GenerateLowercaseCharacter(): char
    + GenerateDigitCharacter(): char
    + GenerateSpecialCharacter(): char
    + GenerateAllowedCharacter(): char
}

class RandomCharacterGenerator {
    - uppercaseCharacters: String
    - lowercaseCharacters: String
    - digitCharacters: String
    - specialCharacters: String
    - allowedCharacters: String
    - randomDevice: random_device
}

interface StringShufflerBase {
    + Shuffle(characters: String): String
}

class StringShuffler {
    - randomDevice: random_device
}

ArgumentValidatorBase <|-- ArgumentValidator
ArgumentProcessorBase <|-- ArgumentProcessor
TerminalBase <|-- Terminal
PasswordGeneratorBase <|-- PasswordGenerator
RandomCharacterGeneratorBase <|-- RandomCharacterGenerator
StringShufflerBase <|-- StringShuffler
ProgramBase <|-- Program

Program *--l ArgumentProcessorBase

ArgumentProcessor *--l ArgumentValidatorBase
ArgumentProcessor *--d PasswordGeneratorBase
ArgumentProcessor *--r TerminalBase

PasswordGenerator *--l RandomCharacterGeneratorBase
PasswordGenerator *--r StringShufflerBase
@enduml